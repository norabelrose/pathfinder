from collections import namedtuple
import numpy as np


# t0 is an offset, in days, from the earliest_start time of the parent Problem
_PathDescriptor = namedtuple('PathDescriptor', ['t0', 'costate0', 'tof'])
class PathDescriptor(_PathDescriptor):
    # Return an updated path descriptor by taking a gradient descent step
    def step(self, grad: 'PathDescriptor', dt: float) -> 'PathDescriptor':
        return PathDescriptor(
            *(x - dx_dt * dt for x, dx_dt in zip(self, grad))
        )


# Path objects store the state and costate of a spacecraft at selected time points
# along its trajectory, and are generated by solving an IVP defined by a PathDescriptor
_Path = namedtuple('_Path', ['r', 'v', 'm', 'lr', 'lv', 'lm'])
class Path(_Path):
    @property
    def thrust_direction(self):
        return self.lv / np.linalg.norm(self.lv, axis=-1, keepdims=True)
